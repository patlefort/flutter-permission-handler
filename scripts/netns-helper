#!/bin/bash

set -euo pipefail
shopt -s inherit_errexit

avail_features=(dhcp dhcp6 macvlan)

opt_overwrite=no
opt_parent_if=
opt_now=no
opt_mac=
opt_help=

pargs=()
while [[ $# -gt 0 ]]; do
	if [[ $1 == '-'* ]]; then
		case "$1" in
			--parent_if)
				opt_parent_if="$2"
				shift 2
			;;
			
			--mac)
				opt_mac="$2"
				shift 2
			;;
			
			--overwrite)
				opt_overwrite=yes
				shift 1
			;;
			
			--now)
				opt_now=yes
				shift 1
			;;
			
			--help)
				opt_help=yes
				shift 1
			;;
			
			*)
				>&2 echo 'Invalid option.'
				exit 1
			;;
		esac
	else
		pargs+=($1)
		shift 1
	fi
done

if [[ "$opt_help" == 'yes' ]]; then
	
	cat <<-EOF
		Switches:
		  --now                        Start, restart or stop services now.
		  --overwrite                  Overwrite config with new config if applicable to feature.
		  --parent_if <interface>      Parent interface for macvlan.
		  --mac <mac address>          MAC address of macvlan interface.
		
		Commands:
		  enable <namespace> [<list of features>]
		  disable <namespace> [<list of features>]
		  add-service <service> <namespace>
		  remove-service <service>
		  status [<namespace>]
		  start|restart|stop <namespace>
			
		Features:
		  dhcp                         Start a dhcp client inside namespace.
		  dhcp6                        Start a dhcpv6 client inside namespace.
		  macvlan                      Create a macvlan interface inside namespace.
	EOF
	
	exit
	
fi

flags=()
if [[ "$opt_now" == 'yes' ]]; then flags+=(--now); fi

read_service()
{
	service="$1"
	
	[[ -n "$service" ]] || \
		{
			>&2 echo 'No service given.'
			exit 1
		}
	
	if [[ $service != *.service ]]; then
		service="${service}.service"
	fi

	[[ -n $(systemctl list-unit-files --full --plain --all --no-legend --type service "$service") ]] || \
		{
			>&2 echo "Service \`$service\` not found."
			return 1
		}
}

feature_is_valid()
{
	for f in ${avail_features[@]}; do [[ "$f" == "$1" ]] && return 0; done
	return 1
}

add_features()
{
	local NS=$1
	shift 1
	
	for feature in "$@"; do
		feature_is_valid "$feature" || 
			{
				>&2 echo "Invalid feature \`$feature\`."
				return 1
			}
	done
	
	for feature in "$@"; do
		case "$feature" in
			macvlan)
				if [[ "$opt_overwrite" == 'yes' || ! -f "/etc/netns-helper/ns/$NS-macvlan.conf" ]]; then
					[[ -n "$opt_parent_if" ]] || \
						{
							>&2 echo "The parent interface of the macvlan interface must be specified with option \`--parent_if <interface>\`."
							exit 1
						}
						
					[[ -f "/etc/netns-helper/ns/$NS-macvlan.conf" ]] && \
						echo "Configuration file \`/etc/netns-helper/ns/$NS-macvlan.conf\` overwritten."
						
					umask 022
					cat > "/etc/netns-helper/ns/$NS-macvlan.conf" <<- EOF
						PARENT_IF="$opt_parent_if"
						MAC=$opt_mac
					EOF
				else
					[[ -f "/etc/netns-helper/ns/$NS-macvlan.conf" ]] && \
						echo "Configuration file \`/etc/netns-helper/ns/$NS-macvlan.conf\` already exists and will not be overwritten."
				fi
			;;
		esac
		
		systemctl enable netns-helper-$feature@$NS.service "${flags[@]}"
	done
}

case ${pargs[0]:-} in
	add-service)
		read_service "${pargs[1]:-}"
		ns=${pargs[2]:-}
		
		[[ -n "$ns" ]] || \
			{
				>&2 echo 'No namespace given.'
				exit 1
			}
		
		umask 022
		
		mkdir -p "/etc/systemd/system/$service.d"
		cat > "/etc/systemd/system/$service.d/netns-helper.conf" <<- EOF
			[Unit]
			After=netns-helper@${ns}.target
			Requisite=netns-helper@${ns}.target
			PartOf=netns-helper@${ns}.target
			JoinsNamespaceOf=netns-helper@${ns}.service
			ConditionPathExists=/var/run/netns/${ns}

			[Service]
			PrivateNetwork=true

			BindPaths=-/etc/netns/${ns}/resolv.conf:/etc/resolv.conf
			BindPaths=-/etc/netns/${ns}/nsswitch.conf:/etc/nsswitch.conf
		EOF
		
		systemctl daemon-reload
		
		if [[ "$opt_now" == 'yes' ]]; then
			systemctl restart $service
		fi
		
		echo "Service \`$service\` added to network namespace \`$ns\`."
	;;
	
	remove-service)
		read_service "${pargs[1]}"
		
		rm -f "/etc/systemd/system/$service.d/netns-helper.conf"
		
		systemctl daemon-reload
		
		if [[ "$opt_now" == 'yes' ]]; then
			systemctl restart $service
		fi
		
		echo "Service \`$service\` removed from network namespace."
	;;
	
	enable)
		ns=${pargs[1]:-}
		
		[[ -n "$ns" ]] || \
			{
				>&2 echo 'No namespace given.'
				exit 1
			}
		
		systemctl enable netns-helper@$ns.service
		
		add_features $ns "${pargs[@]:2}"
		
		systemctl enable netns-helper@$ns.target "${flags[@]}"
	;;
	
	disable)
		ns=${pargs[1]:-}
		
		[[ -n "$ns" ]] || \
			{
				>&2 echo 'No namespace given.'
				exit 1
			}
			
		features=(${pargs[@]:2})
		
		if [[ ${#features[@]} == 0 ]]; then
			systemctl disable netns-helper@$ns.target "${flags[@]}"
		else
			for feature in ${features[@]}; do
				systemctl disable netns-helper-$feature@$ns.service "${flags[@]}"
			done
		fi
		
		systemctl disable netns-helper@$ns.target "${flags[@]}"
	;;
	
	status)
		ns=${pargs[1]:-}
		
		if [[ -z "$ns" ]]; then
			namespaces=$(systemctl list-units --type target "netns-helper@*.target" --all --no-legend --plain --full | sed -r 's/^(\s*)netns-helper@(\S+)\.target(.*)/netns-helper@\2.target/')
			for n in ${namespaces//\\n/}; do
				systemctl list-dependencies "$n"
			done
		else
			systemctl list-dependencies "netns-helper@${ns}.target"
		fi
	;;
	
	start)
		ns=${pargs[1]:-}
		
		systemctl start netns-helper@$ns.target
	;;
	
	stop)
		ns=${pargs[1]:-}
		
		systemctl stop netns-helper@$ns.target
	;;
	
	restart)
		ns=${pargs[1]:-}
		
		systemctl restart netns-helper@$ns.target
	;;
	
	list)
		systemctl list-units --all --type target 'netns-helper*'
	;;
	
	*)
		>&2 echo 'Invalid command.'
		exit 1
	;;
esac
